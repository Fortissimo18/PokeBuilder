{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Layout from './containers/Layout/Layout';\nimport PokeBuilder from './containers/PokeBuilder/PokeBuilder';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport CheckOut from './containers/CheckOut/CheckOut';\nimport Orders from './containers/Orders/Orders';\nimport Auth from './containers/Auth/Auth';\nimport Logout from './containers/Auth/Logout/Logout';\nimport { connect } from 'react-redux';\nimport * as actions from './store/actions/index';\nimport AuthInput from './containers/Auth/AuthInput';\nimport TestUI from './components/UI/TestUI/TestUI';\nimport Cursor from './components/UI/Cursor/Cursor';\nimport Auxilliary from './hoc/Auxilliary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      smallScreen: false\n    };\n\n    this.updateDimensions = () => {\n      let mediaQuery = window.matchMedia(\"(max-width: 1000px)\");\n\n      if (mediaQuery.matches) {\n        this.setState({\n          smallScreen: true\n        });\n      } else {\n        this.setState({\n          smallScreen: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.onTryAutoSignup();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    let page = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Layout, {\n        children: routes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 22\n    }, this);\n\n    if (this.state.smallScreen) {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          children: routes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this);\n    }\n\n    let routes = /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/auth\",\n        component: Auth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        component: AuthInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/testui\",\n        component: TestUI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: PokeBuilder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n\n    if (this.props.isAuthenticated) {\n      routes = /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/logout\",\n          component: Logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/checkout\",\n          component: CheckOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/orders\",\n          component: Orders\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/auth\",\n          component: Auth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          component: AuthInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/testui\",\n          component: TestUI\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          component: PokeBuilder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    }\n\n    return {\n      page\n    };\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/App.js"],"names":["React","Component","Layout","PokeBuilder","Route","Switch","withRouter","Redirect","CheckOut","Orders","Auth","Logout","connect","actions","AuthInput","TestUI","Cursor","Auxilliary","App","state","smallScreen","updateDimensions","mediaQuery","window","matchMedia","matches","setState","componentDidMount","props","onTryAutoSignup","addEventListener","render","page","routes","isAuthenticated","mapStateToProps","auth","token","mapDispatchToProps","dispatch","authCheckState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from './containers/Layout/Layout';\nimport PokeBuilder from './containers/PokeBuilder/PokeBuilder';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport CheckOut from './containers/CheckOut/CheckOut';\nimport Orders from './containers/Orders/Orders';\nimport Auth from './containers/Auth/Auth';\nimport Logout from './containers/Auth/Logout/Logout';\nimport { connect } from 'react-redux';\nimport *  as actions from './store/actions/index';\nimport AuthInput from './containers/Auth/AuthInput';\nimport TestUI from './components/UI/TestUI/TestUI';\nimport Cursor from './components/UI/Cursor/Cursor';\nimport Auxilliary from './hoc/Auxilliary';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignup();\n    window.addEventListener('resize', this.updateDimensions);\n\n  }\n\n  state = { smallScreen: false };\n\n      updateDimensions = () =>{\n        let mediaQuery = window.matchMedia(\"(max-width: 1000px)\");\n        if (mediaQuery.matches) {\n            this.setState({smallScreen:true});\n        }\n        else{\n            this.setState({smallScreen:false});\n        }\n    }\n\n\n  render() {\n\n    let page =       <div >\n    <Cursor/>\n    <Layout>\n      {routes}\n    </Layout>\n  </div>\n    if (this.state.smallScreen){\n      <div >\n      <Layout>\n        {routes}\n      </Layout>\n    </div>\n    }\n\n    let routes = (\n      <Switch>\n        <Route path=\"/auth\" component={Auth} />\n        <Route path=\"/login\" component={AuthInput} />\n        <Route path=\"/testui\" component={TestUI} />\n\n        <Route path=\"/\" exact component={PokeBuilder} />\n        <Redirect to=\"/\" />\n      </Switch>);\n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/checkout\" component={CheckOut} />\n          <Route path=\"/orders\" component={Orders} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route path=\"/login\" component={AuthInput} />\n          <Route path=\"/testui\" component={TestUI} />\n          <Route path=\"/\" exact component={PokeBuilder} />\n          <Redirect to=\"/\" />\n          {/* <Route path=\"/\" exact render={props => <PokeBuilder/>} /> */}\n        </Switch>);\n    }\n\n    return (\n{page}\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n"]},"metadata":{},"sourceType":"module"}