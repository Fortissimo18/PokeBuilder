{"ast":null,"code":"import _objectSpread from\"D:/ITCoursesProjects/React/PokeBuilder/poke-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:/ITCoursesProjects/React/PokeBuilder/poke-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"D:/ITCoursesProjects/React/PokeBuilder/poke-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"D:/ITCoursesProjects/React/PokeBuilder/poke-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"D:/ITCoursesProjects/React/PokeBuilder/poke-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Button from'../../../components/UI/Button/Button';import axios from'../../../axios-orders';import Spinner from'../../../components/UI/Spinner/Spinner';import Input from'../../../components/UI/Input/Input';import{connect}from'react-redux';import withErrorHandler from'../../../hoc/withErrorHandler/withErrorHandler';import*as actions from'../../../store/actions/index';import{checkValidity}from'../../../shared/utility';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ContactData=/*#__PURE__*/function(_Component){_inherits(ContactData,_Component);var _super=_createSuper(ContactData);function ContactData(){var _this;_classCallCheck(this,ContactData);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={orderForm:{name:{elementType:'input',elementConfig:{type:'text',placeholder:'Your Name'},value:'',validation:{required:true},validity:false,touched:false},street:{elementType:'input',elementConfig:{type:'text',placeholder:'Street'},value:'',validation:{required:true},validity:false,touched:false},postcode:{elementType:'input',elementConfig:{type:'text',placeholder:'Postcode'},value:'',validation:{required:true,minLength:4,maxLength:4},validity:false,touched:false},phone:{elementType:'input',elementConfig:{type:'text',placeholder:'Phone Number'},value:'',validation:{required:true,minLength:10,maxLength:10},validity:false,touched:false},deliveryMethod:{elementType:'select',elementConfig:{options:[{value:'fastest',displayValue:'Fastest'},{value:'cheapest',displayValue:'Cheapest'}]},value:'fastest',validation:{},validity:true}},formValidity:false};_this.orderHandler=function(event){event.preventDefault();//prevent page reload\n// this.setState({ loading: true });\nvar formData={};for(var formElementIdentifier in _this.state.orderForm){formData[formElementIdentifier]=_this.state.orderForm[formElementIdentifier].value;}var order={ingredients:_this.props.ings,price:_this.props.price,orderData:formData,userId:_this.props.userId};_this.props.onOrderPoke(order,_this.props.token);// axios.post('/orders.json', order)\n//     .then(response => {\n//         this.setState({ loading: false });\n//         this.props.history.push('/');\n//     })\n//     .catch(this.setState({ loading: false }));\n};_this.inputChangedHandler=function(event,inputIdentifier){//display the typed in content on the form in real time (two-way binding)\nvar updatedOrderForm=_objectSpread({},_this.state.orderForm);var updatedFormElement=_objectSpread({},updatedOrderForm[inputIdentifier]);//deep clone\nupdatedFormElement.value=event.target.value;updatedFormElement.validity=checkValidity(updatedFormElement.value,updatedFormElement.validation);updatedFormElement.touched=true;updatedOrderForm[inputIdentifier]=updatedFormElement;var formValidity=true;for(var _inputIdentifier in updatedOrderForm){formValidity=updatedOrderForm[_inputIdentifier].validity&&formValidity;}_this.setState({orderForm:updatedOrderForm,formValidity:formValidity});};return _this;}_createClass(ContactData,[{key:\"render\",value:function render(){var _this2=this;var formElementsArray=[];for(var key in this.state.orderForm){formElementsArray.push({id:key,config:this.state.orderForm[key]});}var form=/*#__PURE__*/_jsxs(\"form\",{onSubmit:this.orderHandler,children:[formElementsArray.map(function(formElement){return/*#__PURE__*/_jsx(Input,{elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,valid:formElement.config.validity,touched:formElement.config.touched,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);}},formElement.id);}),/*#__PURE__*/_jsx(Button,{btnType:\"Success\",disabled:!this.state.formValidity,children:\"Order\"})]});if(this.props.loading){form=/*#__PURE__*/_jsx(Spinner,{});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Please Enter your Contact Info\"}),form]});}}]);return ContactData;}(Component);var mapStateToProps=function mapStateToProps(state){return{ings:state.pokeBuilder.ingredients,price:state.pokeBuilder.totalPrice,loading:state.order.loading,token:state.auth.token,userId:state.auth.userId};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onOrderPoke:function onOrderPoke(orderData,token){return dispatch(actions.purchasePoke(orderData,token));}};};export default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/CheckOut/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","connect","withErrorHandler","actions","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","validity","touched","street","postcode","minLength","maxLength","phone","deliveryMethod","options","displayValue","formValidity","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderPoke","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","pokeBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchasePoke"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {checkValidity} from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n\r\n            postcode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postcode'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4,\r\n                    maxLength: 4  \r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            phone: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Phone Number'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 10\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation:{},\r\n                validity: true\r\n            },\r\n\r\n        },\r\n        formValidity: false\r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault(); //prevent page reload\r\n        // this.setState({ loading: true });\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onOrderPoke(order, this.props.token);\r\n        // axios.post('/orders.json', order)\r\n        //     .then(response => {\r\n        //         this.setState({ loading: false });\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(this.setState({ loading: false }));\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => { //display the typed in content on the form in real time (two-way binding)\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        }; //deep clone\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.validity = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formValidity = true;\r\n        for (let inputIdentifier in updatedOrderForm){\r\n            formValidity = updatedOrderForm[inputIdentifier].validity && formValidity\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formValidity: formValidity });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            }); \r\n        }\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    valid={formElement.config.validity}\r\n                    touched = {formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled = {!this.state.formValidity}>\r\n                Order</Button>\r\n        </form>);\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div>\r\n                <h4>Please Enter your Contact Info</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.pokeBuilder.ingredients,\r\n        price: state.pokeBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token:state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n            onOrderPoke:(orderData, token) => dispatch(actions.purchasePoke(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}