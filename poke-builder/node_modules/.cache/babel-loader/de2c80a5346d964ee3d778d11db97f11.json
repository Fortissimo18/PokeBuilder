{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\containers\\\\CheckOut\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          validity: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          validity: false,\n          touched: false\n        },\n        postcode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Postcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 4,\n            maxLength: 4\n          },\n          validity: false,\n          touched: false\n        },\n        phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Phone Number'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 10,\n            maxLength: 10\n          },\n          validity: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          validity: true\n        }\n      },\n      formValidity: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); //prevent page reload\n      // this.setState({ loading: true });\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderPoke(order, this.props.token); // axios.post('/orders.json', order)\n      //     .then(response => {\n      //         this.setState({ loading: false });\n      //         this.props.history.push('/');\n      //     })\n      //     .catch(this.setState({ loading: false }));\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //display the typed in content on the form in real time (two-way binding)\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      }; //deep clone\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.validity = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formValidity = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formValidity = updatedOrderForm[inputIdentifier].validity && formValidity;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formValidity: formValidity\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        valid: formElement.config.validity,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formValidity,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }, this);\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Please Enter your Contact Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.pokeBuilder.ingredients,\n    price: state.pokeBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderPoke: (orderData, token) => dispatch(actions.purchasePoke(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/CheckOut/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","connect","withErrorHandler","actions","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","validity","touched","street","postcode","minLength","maxLength","phone","deliveryMethod","options","displayValue","formValidity","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderPoke","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","pokeBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchasePoke"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {checkValidity} from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n\r\n            postcode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postcode'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4,\r\n                    maxLength: 4  \r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            phone: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Phone Number'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 10\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation:{},\r\n                validity: true\r\n            },\r\n\r\n        },\r\n        formValidity: false\r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault(); //prevent page reload\r\n        // this.setState({ loading: true });\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onOrderPoke(order, this.props.token);\r\n        // axios.post('/orders.json', order)\r\n        //     .then(response => {\r\n        //         this.setState({ loading: false });\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(this.setState({ loading: false }));\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => { //display the typed in content on the form in real time (two-way binding)\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        }; //deep clone\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.validity = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formValidity = true;\r\n        for (let inputIdentifier in updatedOrderForm){\r\n            formValidity = updatedOrderForm[inputIdentifier].validity && formValidity\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formValidity: formValidity });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            }); \r\n        }\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    valid={formElement.config.validity}\r\n                    touched = {formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled = {!this.state.formValidity}>\r\n                Order</Button>\r\n        </form>);\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div>\r\n                <h4>Please Enter your Contact Info</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.pokeBuilder.ingredients,\r\n        price: state.pokeBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token:state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n            onOrderPoke:(orderData, token) => dispatch(actions.purchasePoke(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}