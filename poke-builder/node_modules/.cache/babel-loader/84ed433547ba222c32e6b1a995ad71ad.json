{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\containers\\\\CheckOut\\\\ContactData\\\\ContactData.js\";\nimport classes from './ContactData.module.css';\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          validity: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          validity: false,\n          touched: false\n        },\n        postcode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Postcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 4,\n            maxLength: 4\n          },\n          validity: false,\n          touched: false\n        },\n        phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Phone Number'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 10,\n            maxLength: 10\n          },\n          validity: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          validity: true\n        }\n      },\n      loading: false,\n      formValidity: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); //prevent page reload\n      // this.setState({ loading: true });\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData\n      };\n      this.props.onOrderPoke(order); // axios.post('/orders.json', order)\n      //     .then(response => {\n      //         this.setState({ loading: false });\n      //         this.props.history.push('/');\n      //     })\n      //     .catch(this.setState({ loading: false }));\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //display the typed in content on the form in real time (two-way binding)\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      }; //deep clone\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.validity = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formValidity = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formValidity = updatedOrderForm[inputIdentifier].validity && formValidity;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formValidity: formValidity\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        valid: formElement.config.validity,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formValidity,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Please Enter your Contact Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  onOrderPoke: orderData => dispatch(actions.purchasePokeStart(orderData));\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/CheckOut/ContactData/ContactData.js"],"names":["classes","React","Component","Button","axios","Spinner","Input","connect","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","validity","touched","street","postcode","minLength","maxLength","phone","deliveryMethod","options","displayValue","loading","formValidity","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","onOrderPoke","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","render","formElementsArray","key","push","id","config","form","map","formElement","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","purchasePokeStart"],"mappings":"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","sourcesContent":["import classes from './ContactData.module.css';\r\nimport React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n\r\n            postcode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postcode'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4,\r\n                    maxLength: 4  \r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            phone: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Phone Number'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 10\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation:{},\r\n                validity: true\r\n            },\r\n\r\n        },\r\n        loading: false,\r\n        formValidity: false\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault(); //prevent page reload\r\n        // this.setState({ loading: true });\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData\r\n        };\r\n\r\n        this.props.onOrderPoke(order);\r\n        // axios.post('/orders.json', order)\r\n        //     .then(response => {\r\n        //         this.setState({ loading: false });\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(this.setState({ loading: false }));\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => { //display the typed in content on the form in real time (two-way binding)\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        }; //deep clone\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.validity = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formValidity = true;\r\n        for (let inputIdentifier in updatedOrderForm){\r\n            formValidity = updatedOrderForm[inputIdentifier].validity && formValidity\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formValidity: formValidity });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            }); \r\n        }\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    valid={formElement.config.validity}\r\n                    touched = {formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled = {!this.state.formValidity}>\r\n                Order</Button>\r\n        </form>);\r\n\r\n        if (this.state.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div>\r\n                <h4>Please Enter your Contact Info</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.ingredients,\r\n        price: state.totalPrice\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    onOrderPoke:(orderData) => dispatch(actions.purchasePokeStart(orderData));\r\n}\r\n\r\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}