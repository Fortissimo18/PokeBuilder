{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\components\\\\Poke\\\\BuildControls\\\\BuildControls.js\";\nimport React from 'react';\nimport classes from './BuildControls.module.css';\nimport BuildControl from './BuildControl/BuildControl';\nimport Auxilliary from '../../../hoc/Auxilliary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst controls = {\n  base: {\n    value: '',\n    ingredients: [{\n      label: 'Quinoa',\n      type: 'quinoa'\n    }, {\n      label: 'White Rice',\n      type: 'whiterice'\n    }, {\n      label: 'Brown Rice',\n      type: 'brownrice'\n    }]\n  },\n  proteins: [{\n    label: 'Prawn',\n    type: 'prawn'\n  }, {\n    label: 'Egg',\n    type: 'egg'\n  }],\n  toppings: [{\n    label: 'Lettuce',\n    type: 'lettuce'\n  }]\n};\n\nconst selectionChangedHandler = (event, props) => {\n  controls.base.value = event.target.value;\n  let resetIngNames = [];\n  controls.base.ingredients.forEach(ing => {\n    if (ing.type !== controls.base.value) {\n      resetIngNames.push(ing.type);\n    }\n  });\n  props.ingredientsReset(resetIngNames);\n  props.ingredientAdded(controls.base.value);\n};\n\nconst buildControls = props => {\n  let transformedControls = [];\n  transformedControls.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Choose the \", props.category]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 30\n  }, this));\n\n  if (props.category === 'base') {\n    controls['base'].ingredients.map(base => transformedControls.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: props.animationCSS,\n      onAnimationEnd: props.animationReset,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.radioGroup,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes.radioLabel,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: base.type,\n            name: \"base\",\n            value: base.type,\n            onChange: event => selectionChangedHandler(event, props)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.innerLabel,\n            children: base.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this))); // transformedControls.push(controls['base'].ingredients.map(base => (\n    //     <Auxilliary>\n    //         <input className={classes.radio} type=\"radio\" id={base.type} name=\"base\" value={base.type} onChange={(event) => selectionChangedHandler(event, props)}></input>\n    //         <label className={[classes.radio,classes.label].join(' ')} for={base.label}>{base.label}</label>\n    //     </Auxilliary>)));\n  } // if (props.category === 'base') {\n  //     transformedControls.push(\n  //         <select\n  //             value={controls.base.value}\n  //             onChange={(event) => selectionChangedHandler(event, props)}>\n  //             {controls['base'].ingredients.map(base => (\n  //                 <option key={base.type}\n  //                     value={base.type}>\n  //                     {base.label}\n  //                 </option>)\n  //             )}\n  //         </select>);\n  // }\n  else {\n      controls[props.category].forEach(ctrl => {\n        transformedControls.push( /*#__PURE__*/_jsxDEV(BuildControl, {\n          label: ctrl.label,\n          added: () => props.ingredientAdded(ctrl.type),\n          removed: () => props.ingredientRemoved(ctrl.type),\n          disable: props.disable[ctrl.type],\n          numIngs: props.ings[ctrl.type],\n          animationCSS: props.animationCSS,\n          animationReset: props.animationReset\n        }, ctrl.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this));\n      });\n    } // Object.keys(controls)\n  //     .forEach(category => {\n  //         transformedControls.push(<p>Choose the {category}</p>)\n  //         // console.log(props);\n  //         if (category === 'base') {\n  //             transformedControls.push(\n  //                 <select\n  //                     value={category.value}\n  //                     onChange={(event) => selectionChangedHandler(event, props)}>\n  //                     {controls[category].ingredients.map(base => (\n  //                         <option key={base.type}\n  //                             value={base.type}>\n  //                             {base.label}\n  //                         </option>)\n  //                     )}\n  //                 </select>);\n  //         }\n  //         else {\n  //             controls[category].forEach(ctrl => {\n  //                 transformedControls.push(\n  //                     <BuildControl\n  //                         key={ctrl.label}\n  //                         label={ctrl.label}\n  //                         added={() => props.ingredientAdded(ctrl.type)}\n  //                         removed={() => props.ingredientRemoved(ctrl.type)}\n  //                         disable={props.disable[ctrl.type]}\n  //                         numIngs={props.ings[ctrl.type]} />\n  //                 );\n  //             });\n  //         }\n  //     });\n  // let leftArrowClasses = [classes.arrow, classes.left];\n  // let leftArrowDisabledClasses = [classes.arrow, classes.left, classes.disabled];\n  // let rightArrowClasses = [classes.arrow, classes.right];\n  // let rightArrowDisabledClasses = [classes.arrow, classes.right, classes.disabled];\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Price: \", props.totalPrice.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), transformedControls, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.actionButton,\n        disabled: !props.purchasable,\n        onClick: props.ordered,\n        children: props.isAuth ? \"Order Now\" : \"Sign In to Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this) // <div className={classes.BuildControls}>\n  //     <fieldset>\n  //         <p>Total Price: {props.totalPrice.toFixed(2)}</p>\n  //         {transformedControls}\n  //         {/* <input type=\"button\" name=\"next\" className={classes.actionButton} value=\"Next\" /> */}\n  //         <div>\n  //             <button\n  //                 className={classes.actionButton}\n  //                 disabled={!props.purchasable}\n  //                 onClick={props.ordered}>\n  //                 {props.isAuth ? \"Order Now\" : \"Sign In to Order\"}\n  //             </button>\n  //         </div>\n  //         {props.goUpDisable ? <a href=\"#\" className={leftArrowDisabledClasses.join(' ')} onClick={props.goUp}></a> :\n  //             <a href=\"#\" className={leftArrowClasses.join(' ')} onClick={props.goUp}></a>}\n  //         {props.goDownDisable ? <a href=\"#\" className={rightArrowDisabledClasses.join(' ')} onClick={props.goDown}></a> :\n  //             <a href=\"#\" className={rightArrowClasses.join(' ')} onClick={props.goDown}></a>}\n  //     </fieldset>\n  // </div>\n  ;\n};\n\n{\n  /* <div className={classes.BuildControls}>\r\n             <p>Total Price: {props.totalPrice.toFixed(2)}</p> */\n}\n{\n  /* {controls.map(ctrl => {\r\n             <BuildControl\r\n                 key={ctrl.label}\r\n                 label={ctrl.label}\r\n                 added={() => props.ingredientAdded(ctrl.type)}\r\n                 removed={() => props.ingredientRemoved(ctrl.type)}\r\n                 disable={props.disable[ctrl.type]} />\r\n         }\r\n  \n         )} */\n}\n{\n  /* <button\r\n                 className={classes.OrderButton}\r\n                 disabled={!props.purchasable}\r\n                 onClick={props.ordered}>\r\n                 {props.isAuth ? \"Order Now\" : \"Sign In to Order\"}</button>\r\n         </div> */\n}\nexport default buildControls;","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/components/Poke/BuildControls/BuildControls.js"],"names":["React","classes","BuildControl","Auxilliary","controls","base","value","ingredients","label","type","proteins","toppings","selectionChangedHandler","event","props","target","resetIngNames","forEach","ing","push","ingredientsReset","ingredientAdded","buildControls","transformedControls","category","map","animationCSS","animationReset","radioGroup","radioLabel","innerLabel","ctrl","ingredientRemoved","disable","ings","totalPrice","toFixed","actionButton","purchasable","ordered","isAuth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport classes from './BuildControls.module.css';\r\nimport BuildControl from './BuildControl/BuildControl';\r\nimport Auxilliary from '../../../hoc/Auxilliary';\r\n\r\nconst controls = {\r\n    base: {\r\n        value: '',\r\n        ingredients: [\r\n            { label: 'Quinoa', type: 'quinoa' },\r\n            { label: 'White Rice', type: 'whiterice' },\r\n            { label: 'Brown Rice', type: 'brownrice' },],\r\n    },\r\n    proteins: [\r\n        { label: 'Prawn', type: 'prawn' },\r\n        { label: 'Egg', type: 'egg' },],\r\n    toppings: [\r\n        { label: 'Lettuce', type: 'lettuce' },],\r\n\r\n};\r\n\r\n\r\nconst selectionChangedHandler = (event, props) => {\r\n    controls.base.value = event.target.value;\r\n    let resetIngNames = []\r\n    controls.base.ingredients.forEach(ing => {\r\n        if (ing.type !== controls.base.value) {\r\n            resetIngNames.push(ing.type);\r\n        }\r\n    });\r\n    props.ingredientsReset(resetIngNames);\r\n    props.ingredientAdded(controls.base.value);\r\n}\r\n\r\n\r\n\r\nconst buildControls = (props) => {\r\n    let transformedControls = [];\r\n    transformedControls.push(<p>Choose the {props.category}</p>)\r\n    if (props.category === 'base') {\r\n        controls['base'].ingredients.map(base => (transformedControls.push(\r\n            <div className={props.animationCSS} onAnimationEnd={props.animationReset}>\r\n            <div className={classes.radioGroup}>\r\n                <label className={classes.radioLabel} >\r\n                <input type=\"radio\" id={base.type} name=\"base\" value={base.type} onChange={(event) => selectionChangedHandler(event, props)}></input>\r\n                <span className={classes.innerLabel}>{base.label}</span>\r\n                </label>\r\n            </div>\r\n            </div>\r\n        )));\r\n        // transformedControls.push(controls['base'].ingredients.map(base => (\r\n        //     <Auxilliary>\r\n        //         <input className={classes.radio} type=\"radio\" id={base.type} name=\"base\" value={base.type} onChange={(event) => selectionChangedHandler(event, props)}></input>\r\n        //         <label className={[classes.radio,classes.label].join(' ')} for={base.label}>{base.label}</label>\r\n        //     </Auxilliary>)));\r\n    }\r\n\r\n\r\n\r\n\r\n    // if (props.category === 'base') {\r\n    //     transformedControls.push(\r\n    //         <select\r\n    //             value={controls.base.value}\r\n    //             onChange={(event) => selectionChangedHandler(event, props)}>\r\n    //             {controls['base'].ingredients.map(base => (\r\n    //                 <option key={base.type}\r\n    //                     value={base.type}>\r\n    //                     {base.label}\r\n    //                 </option>)\r\n    //             )}\r\n    //         </select>);\r\n    // }\r\n    else {\r\n        controls[props.category].forEach(ctrl => {\r\n            transformedControls.push(\r\n                <BuildControl\r\n                    key={ctrl.label}\r\n                    label={ctrl.label}\r\n                    added={() => props.ingredientAdded(ctrl.type)}\r\n                    removed={() => props.ingredientRemoved(ctrl.type)}\r\n                    disable={props.disable[ctrl.type]}\r\n                    numIngs={props.ings[ctrl.type]} \r\n                    animationCSS={props.animationCSS}\r\n                    animationReset={props.animationReset}\r\n                    />\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // Object.keys(controls)\r\n    //     .forEach(category => {\r\n    //         transformedControls.push(<p>Choose the {category}</p>)\r\n    //         // console.log(props);\r\n    //         if (category === 'base') {\r\n    //             transformedControls.push(\r\n    //                 <select\r\n    //                     value={category.value}\r\n    //                     onChange={(event) => selectionChangedHandler(event, props)}>\r\n    //                     {controls[category].ingredients.map(base => (\r\n    //                         <option key={base.type}\r\n    //                             value={base.type}>\r\n    //                             {base.label}\r\n    //                         </option>)\r\n    //                     )}\r\n    //                 </select>);\r\n    //         }\r\n    //         else {\r\n    //             controls[category].forEach(ctrl => {\r\n    //                 transformedControls.push(\r\n    //                     <BuildControl\r\n    //                         key={ctrl.label}\r\n    //                         label={ctrl.label}\r\n    //                         added={() => props.ingredientAdded(ctrl.type)}\r\n    //                         removed={() => props.ingredientRemoved(ctrl.type)}\r\n    //                         disable={props.disable[ctrl.type]}\r\n    //                         numIngs={props.ings[ctrl.type]} />\r\n    //                 );\r\n    //             });\r\n    //         }\r\n\r\n    //     });\r\n    // let leftArrowClasses = [classes.arrow, classes.left];\r\n    // let leftArrowDisabledClasses = [classes.arrow, classes.left, classes.disabled];\r\n    // let rightArrowClasses = [classes.arrow, classes.right];\r\n    // let rightArrowDisabledClasses = [classes.arrow, classes.right, classes.disabled];\r\n\r\n    return (\r\n        <div>\r\n            <p>Total Price: {props.totalPrice.toFixed(2)}</p>\r\n            {transformedControls}\r\n            {/* <input type=\"button\" name=\"next\" className={classes.actionButton} value=\"Next\" /> */}\r\n            <div>\r\n                <button\r\n                    className={classes.actionButton}\r\n                    disabled={!props.purchasable}\r\n                    onClick={props.ordered}>\r\n                    {props.isAuth ? \"Order Now\" : \"Sign In to Order\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        // <div className={classes.BuildControls}>\r\n        //     <fieldset>\r\n        //         <p>Total Price: {props.totalPrice.toFixed(2)}</p>\r\n        //         {transformedControls}\r\n\r\n        //         {/* <input type=\"button\" name=\"next\" className={classes.actionButton} value=\"Next\" /> */}\r\n        //         <div>\r\n        //             <button\r\n        //                 className={classes.actionButton}\r\n        //                 disabled={!props.purchasable}\r\n        //                 onClick={props.ordered}>\r\n        //                 {props.isAuth ? \"Order Now\" : \"Sign In to Order\"}\r\n        //             </button>\r\n        //         </div>\r\n        //         {props.goUpDisable ? <a href=\"#\" className={leftArrowDisabledClasses.join(' ')} onClick={props.goUp}></a> :\r\n        //             <a href=\"#\" className={leftArrowClasses.join(' ')} onClick={props.goUp}></a>}\r\n\r\n        //         {props.goDownDisable ? <a href=\"#\" className={rightArrowDisabledClasses.join(' ')} onClick={props.goDown}></a> :\r\n        //             <a href=\"#\" className={rightArrowClasses.join(' ')} onClick={props.goDown}></a>}\r\n        //     </fieldset>\r\n        // </div>\r\n    )\r\n\r\n}\r\n{/* <div className={classes.BuildControls}>\r\n            <p>Total Price: {props.totalPrice.toFixed(2)}</p> */}\r\n\r\n\r\n\r\n\r\n{/* {controls.map(ctrl => {\r\n            <BuildControl\r\n                key={ctrl.label}\r\n                label={ctrl.label}\r\n                added={() => props.ingredientAdded(ctrl.type)}\r\n                removed={() => props.ingredientRemoved(ctrl.type)}\r\n                disable={props.disable[ctrl.type]} />\r\n        }\r\n\r\n        )} */}\r\n{/* <button\r\n                className={classes.OrderButton}\r\n                disabled={!props.purchasable}\r\n                onClick={props.ordered}>\r\n                {props.isAuth ? \"Order Now\" : \"Sign In to Order\"}</button>\r\n        </div> */}\r\n\r\n\r\nexport default buildControls;"]},"metadata":{},"sourceType":"module"}