{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false,\n  building: false\n};\nconst INGREDIENT_PRICE = {\n  lettuce: 1,\n  quinoa: 2,\n  prawn: 3,\n  egg: 2\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return { //overwrite the copy of ingredients\n        ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICE[action.ingredientName],\n        building: true\n      };\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICE[action.ingredientName],\n        building: true\n      };\n\n    case actionTypes.RESET_INGREDIENTS:\n      let resetIngredients = { ...state.ingredients\n      };\n      action.ingredientNames.forEach(ing => {\n        resetIngredients[ing] = 0;\n      });\n      return { ...state,\n        ingredients: resetIngredients,\n        building: true\n      };\n\n    case actionTypes.SET_INGREDIENTS:\n      return { ...state,\n        ingredients: action.ingredients,\n        totalPrice: 4,\n        error: false,\n        building: false\n      };\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      {\n        return { ...state,\n          error: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/store/reducers/pokeBuilder.js"],"names":["actionTypes","initialState","ingredients","totalPrice","error","building","INGREDIENT_PRICE","lettuce","quinoa","prawn","egg","reducer","state","action","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT","RESET_INGREDIENTS","resetIngredients","ingredientNames","forEach","ing","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,KAAK,EAAE,KAHU;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;AAOA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,OAAO,EAAE,CADY;AAErBC,EAAAA,MAAM,EAAE,CAFa;AAGrBC,EAAAA,KAAK,EAAE,CAHc;AAIrBC,EAAAA,GAAG,EAAE;AAJgB,CAAzB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,WAAW,CAACe,cAAjB;AACI,aAAO,EACH;AACA,WAAGH,KAFA;AAGHV,QAAAA,WAAW,EAAE,EACT,GAAGU,KAAK,CAACV,WADA;AAET,WAACW,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACV,WAAN,CAAkBW,MAAM,CAACG,cAAzB,IAA2C;AAF3D,SAHV;AAOHb,QAAAA,UAAU,EAAES,KAAK,CAACT,UAAN,GAAmBG,gBAAgB,CAACO,MAAM,CAACG,cAAR,CAP5C;AAQHX,QAAAA,QAAQ,EAAE;AARP,OAAP;;AAUJ,SAAKL,WAAW,CAACiB,iBAAjB;AACI,aAAO,EACH,GAAGL,KADA;AAEHV,QAAAA,WAAW,EAAE,EACT,GAAGU,KAAK,CAACV,WADA;AAET,WAACW,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACV,WAAN,CAAkBW,MAAM,CAACG,cAAzB,IAA2C;AAF3D,SAFV;AAMHb,QAAAA,UAAU,EAAES,KAAK,CAACT,UAAN,GAAmBG,gBAAgB,CAACO,MAAM,CAACG,cAAR,CAN5C;AAOHX,QAAAA,QAAQ,EAAE;AAPP,OAAP;;AASJ,SAAKL,WAAW,CAACkB,iBAAjB;AACI,UAAIC,gBAAgB,GAAG,EAAE,GAAGP,KAAK,CAACV;AAAX,OAAvB;AACAW,MAAAA,MAAM,CAACO,eAAP,CAAuBC,OAAvB,CAA+BC,GAAG,IAAI;AAClCH,QAAAA,gBAAgB,CAACG,GAAD,CAAhB,GAAwB,CAAxB;AACH,OAFD;AAGA,aAAO,EACH,GAAGV,KADA;AAEHV,QAAAA,WAAW,EAAEiB,gBAFV;AAGHd,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAMJ,SAAKL,WAAW,CAACuB,eAAjB;AACI,aAAO,EACH,GAAGX,KADA;AAEHV,QAAAA,WAAW,EAAEW,MAAM,CAACX,WAFjB;AAGHC,QAAAA,UAAU,EAAE,CAHT;AAIHC,QAAAA,KAAK,EAAE,KAJJ;AAKHC,QAAAA,QAAQ,EAAE;AALP,OAAP;;AAOJ,SAAKL,WAAW,CAACwB,wBAAjB;AACI;AACI,eAAO,EACH,GAAGZ,KADA;AAEHR,UAAAA,KAAK,EAAE;AAFJ,SAAP;AAIH;;AACL;AAAS,aAAOQ,KAAP;AAhDb;AAkDH,CAnDD;;AAqDA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    ingredients: null,\r\n    totalPrice: 4,\r\n    error: false,\r\n    building: false\r\n};\r\n\r\nconst INGREDIENT_PRICE = {\r\n    lettuce: 1,\r\n    quinoa: 2,\r\n    prawn: 3,\r\n    egg: 2,\r\n\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_INGREDIENT:\r\n            return {\r\n                //overwrite the copy of ingredients\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\r\n                },\r\n                totalPrice: state.totalPrice + INGREDIENT_PRICE[action.ingredientName],\r\n                building: true\r\n            };\r\n        case actionTypes.REMOVE_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\r\n                },\r\n                totalPrice: state.totalPrice - INGREDIENT_PRICE[action.ingredientName],\r\n                building: true\r\n            };\r\n        case actionTypes.RESET_INGREDIENTS:\r\n            let resetIngredients = { ...state.ingredients };\r\n            action.ingredientNames.forEach(ing => {\r\n                resetIngredients[ing] = 0;\r\n            });\r\n            return {\r\n                ...state,\r\n                ingredients: resetIngredients,\r\n                building: true\r\n            };\r\n\r\n        case actionTypes.SET_INGREDIENTS:\r\n            return {\r\n                ...state,\r\n                ingredients: action.ingredients,\r\n                totalPrice: 4,\r\n                error: false,\r\n                building: false\r\n            };\r\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: true\r\n                }\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}