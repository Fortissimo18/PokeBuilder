{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/utility';\nimport Alert from 'react-bootstrap/Alert';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          validity: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          validity: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    this.errorMessage = () => {\n      //rearrang the error message from firebase\n      let errorMessage = null;\n      console.log(this.props.signInError);\n      console.log(this.props.signUpError);\n\n      if (this.props.error) {\n        const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\n        const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n        errorMessage = /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: msgText\n        }, msgText, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this);\n      }\n\n      return errorMessage;\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingPoke && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      valid: formElement.config.validity,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 20\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 28\n      }, this);\n    }\n\n    const errorMessage = this.errorMessage();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loginBG,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.section,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.checkbox,\n          type: \"checkbox\",\n          id: \"reg-log\",\n          name: \"reg-log\",\n          onClick: this.switchAuthModeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"reg-log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.card3dWrap,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.card3dWrapper,\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.submitHandler,\n              className: classes.cardFront,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.centerWrap,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Sign Up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 37\n                }, this), form, errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: classes.btn,\n                  children: \"submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.submitHandler,\n              className: classes.cardBack,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.centerWrap,\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Log In\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 41\n                  }, this), form, errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: classes.btn,\n                    children: \"submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"mb-0 mt-4 text-center\",\n                    children: /*#__PURE__*/_jsxDEV(\"a\", {\n                      href: \"#0\",\n                      className: classes.link,\n                      children: \"Forgot your password?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 78\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    signInError: state.auth.signInError,\n    signUpError: state.auth.signUpError,\n    isAuthenticated: state.auth.token !== null,\n    buildingPoke: state.pokeBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth); // import React, { Component } from 'react';\n// import Input from '../../components/UI/Input/Input';\n// import Button from '../../components/UI/Button/Button';\n// import classes from './Auth.module.css';\n// import * as actions from '../../store/actions/index';\n// import { connect } from 'react-redux';\n// import Spinner from '../../components/UI/Spinner/Spinner';\n// import {Redirect} from 'react-router-dom';\n// import {checkValidity} from '../../shared/utility';\n// import Alert from 'react-bootstrap/Alert';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// class Auth extends Component {\n//     state = {\n//         controls: {\n//             email: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'email',\n//                     placeholder: 'Email'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     isEmail: true\n//                 },\n//                 validity: false,\n//                 touched: false\n//             },\n//             password: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'password',\n//                     placeholder: 'Password'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     minLength: 6\n//                 },\n//                 validity: false,\n//                 touched: false\n//             },\n//         },\n//         isSignUp: true\n//     }\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\n//                 touched: true\n//             }\n//         };\n//         this.setState({ controls: updatedControls });\n//     }\n//     submitHandler = (event) => {\n//         event.preventDefault();        \n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n//     }\n//     switchAuthModeHandler =()=>{\n//         this.setState(prevState => {\n//             return{\n//                 isSignUp:!prevState.isSignUp\n//             }\n//         });\n//     }\n//     errorMessage = () => { //rearrang the error message from firebase\n//         let errorMessage  = null;\n//         if(this.props.error){\n//             const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\n//             const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n//             errorMessage=(\n//                 <Alert key = {msgText} variant = \"danger\">{msgText}</Alert>\n//             );\n//         }\n//         return errorMessage\n//     }\n//     componentDidMount(){\n//         if (! this.props.buildingPoke && this.props.authRedirectPath !=='/'){\n//             this.props.onSetAuthRedirectPath();\n//         }\n//     }\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key]\n//             });\n//         }\n//         let form = formElementsArray.map(formElement => (\n//             <Input\n//                 key={formElement.id}\n//                 elementType={formElement.config.elementType}\n//                 elementConfig={formElement.config.elementConfig}\n//                 value={formElement.config.value}\n//                 valid={formElement.config.validity}\n//                 touched={formElement.config.touched}\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n//         ));\n//         if(this.props.loading){\n//             form=<Spinner/>\n//         }\n//         let authRedirect = null;\n//         if(this.props.isAuthenticated){\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\n//         } \n//         const errorMessage  = this.errorMessage();\n//         return (\n//             <div>\n//                 <div className={classes.Auth}>\n//                 {authRedirect}\n//                 <h1>{this.state.isSignUp? \"Sign Up\" : \"Sign In\"}</h1>\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     {errorMessage}\n//                     <Button btnType=\"Success\">Submit</Button>\n//                 </form>                \n//                 <Button \n//                 clicked = {this.switchAuthModeHandler}\n//                 btnType = \"Danger\">Switch to {this.state.isSignUp? \"Sign In\" : \"Sign Up\"}</Button>\n//             </div>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = state =>{\n//     return {\n//         loading: state.auth.loading,\n//         error: state.auth.error,\n//         isAuthenticated: state.auth.token !== null,\n//         buildingPoke: state.pokeBuilder.building,\n//         authRedirectPath: state.auth.authRedirectPath\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password,isSignUp)),\n//         onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\n//     }\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","checkValidity","Alert","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","validity","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","errorMessage","console","log","signInError","signUpError","error","lower","String","message","toLowerCase","replace","msgText","charAt","toUpperCase","slice","componentDidMount","buildingPoke","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","authRedirect","isAuthenticated","loginBG","section","heading","checkbox","card3dWrap","card3dWrapper","cardFront","centerWrap","btn","cardBack","link","mapStateToProps","auth","token","pokeBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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":["import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { checkValidity } from '../../shared/utility';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        });\r\n    }\r\n\r\n    errorMessage = () => { //rearrang the error message from firebase\r\n        let errorMessage = null;\r\n        console.log(this.props.signInError)\r\n        console.log(this.props.signUpError)\r\n        if (this.props.error) {\r\n            const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\r\n            const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            errorMessage = (\r\n                <Alert key={msgText} variant=\"danger\">{msgText}</Alert>\r\n            );\r\n        }\r\n        return errorMessage\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingPoke && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                valid={formElement.config.validity}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        const errorMessage = this.errorMessage();\r\n        return (\r\n            <div className={classes.loginBG}>\r\n                <div className={classes.section}>\r\n                    <h1 className={classes.heading}>\r\n                        <span>Log In</span>\r\n                        <span>Sign Up</span>\r\n                    </h1>\r\n                    <input className={classes.checkbox} type=\"checkbox\" id=\"reg-log\" name=\"reg-log\"  onClick = {this.switchAuthModeHandler}/>\r\n                    <label for=\"reg-log\"></label>\r\n                    <div className={classes.card3dWrap}>\r\n                        <div className={classes.card3dWrapper}>\r\n\r\n                            <form onSubmit={this.submitHandler} className={classes.cardFront}>\r\n                                <div className={classes.centerWrap}>\r\n                                    <h2 >Sign Up</h2>\r\n                                    {form}\r\n                                    {errorMessage}\r\n                                    <button className={classes.btn}>submit</button>\r\n                                </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={this.submitHandler} className={classes.cardBack}>\r\n                                <div >\r\n                                    <div className={classes.centerWrap}>\r\n                                        <h2 >Log In</h2>\r\n                                        {form}\r\n                                        {errorMessage}\r\n                                        <button className={classes.btn}>submit</button>                                    \r\n                                        <p className=\"mb-0 mt-4 text-center\"><a href=\"#0\" className={classes.link}>Forgot your password?</a></p>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        signInError: state.auth.signInError,\r\n        signUpError: state.auth.signUpError,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingPoke: state.pokeBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import Input from '../../components/UI/Input/Input';\r\n// import Button from '../../components/UI/Button/Button';\r\n// import classes from './Auth.module.css';\r\n// import * as actions from '../../store/actions/index';\r\n// import { connect } from 'react-redux';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\n// import {Redirect} from 'react-router-dom';\r\n// import {checkValidity} from '../../shared/utility';\r\n// import Alert from 'react-bootstrap/Alert';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// class Auth extends Component {\r\n\r\n//     state = {\r\n//         controls: {\r\n//             email: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'email',\r\n//                     placeholder: 'Email'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     isEmail: true\r\n//                 },\r\n//                 validity: false,\r\n//                 touched: false\r\n//             },\r\n//             password: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'password',\r\n//                     placeholder: 'Password'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     minLength: 6\r\n//                 },\r\n//                 validity: false,\r\n//                 touched: false\r\n//             },\r\n//         },\r\n//         isSignUp: true\r\n//     }\r\n\r\n//     inputChangedHandler = (event, controlName) => {\r\n//         const updatedControls = {\r\n//             ...this.state.controls,\r\n//             [controlName]: {\r\n//                 ...this.state.controls[controlName],\r\n//                 value: event.target.value,\r\n//                 validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n//                 touched: true\r\n//             }\r\n//         };\r\n//         this.setState({ controls: updatedControls });\r\n//     }\r\n\r\n//     submitHandler = (event) => {\r\n//         event.preventDefault();        \r\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n//     }\r\n\r\n//     switchAuthModeHandler =()=>{\r\n//         this.setState(prevState => {\r\n//             return{\r\n//                 isSignUp:!prevState.isSignUp\r\n//             }\r\n//         });\r\n//     }\r\n\r\n//     errorMessage = () => { //rearrang the error message from firebase\r\n//         let errorMessage  = null;\r\n\r\n//         if(this.props.error){\r\n//             const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\r\n//             const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n//             errorMessage=(\r\n//                 <Alert key = {msgText} variant = \"danger\">{msgText}</Alert>\r\n//             );\r\n//         }\r\n//         return errorMessage\r\n//     }\r\n\r\n\r\n//     componentDidMount(){\r\n//         if (! this.props.buildingPoke && this.props.authRedirectPath !=='/'){\r\n//             this.props.onSetAuthRedirectPath();\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         const formElementsArray = [];\r\n//         for (let key in this.state.controls) {\r\n//             formElementsArray.push({\r\n//                 id: key,\r\n//                 config: this.state.controls[key]\r\n//             });\r\n//         }\r\n\r\n//         let form = formElementsArray.map(formElement => (\r\n//             <Input\r\n//                 key={formElement.id}\r\n//                 elementType={formElement.config.elementType}\r\n//                 elementConfig={formElement.config.elementConfig}\r\n//                 value={formElement.config.value}\r\n//                 valid={formElement.config.validity}\r\n//                 touched={formElement.config.touched}\r\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n//         ));\r\n\r\n//         if(this.props.loading){\r\n//             form=<Spinner/>\r\n//         }\r\n\r\n\r\n//         let authRedirect = null;\r\n//         if(this.props.isAuthenticated){\r\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n//         } \r\n\r\n//         const errorMessage  = this.errorMessage();\r\n\r\n//         return (\r\n//             <div>\r\n//                 <div className={classes.Auth}>\r\n//                 {authRedirect}\r\n//                 <h1>{this.state.isSignUp? \"Sign Up\" : \"Sign In\"}</h1>\r\n//                 <form onSubmit={this.submitHandler}>\r\n//                     {form}\r\n//                     {errorMessage}\r\n//                     <Button btnType=\"Success\">Submit</Button>\r\n//                 </form>                \r\n//                 <Button \r\n//                 clicked = {this.switchAuthModeHandler}\r\n//                 btnType = \"Danger\">Switch to {this.state.isSignUp? \"Sign In\" : \"Sign Up\"}</Button>\r\n//             </div>\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = state =>{\r\n//     return {\r\n//         loading: state.auth.loading,\r\n//         error: state.auth.error,\r\n//         isAuthenticated: state.auth.token !== null,\r\n//         buildingPoke: state.pokeBuilder.building,\r\n//         authRedirectPath: state.auth.authRedirectPath\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password,isSignUp)),\r\n//         onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\r\n//     }\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}