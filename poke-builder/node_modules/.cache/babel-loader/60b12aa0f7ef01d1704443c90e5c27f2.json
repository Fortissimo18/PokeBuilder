{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nconst API_KEY = 'AIzaSyCluRXdmpTGmLP9XBUBi9gaRgrhVZKTH-0';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = (error, isSignUp) => {\n  if (isSignup) {\n    return {\n      type: actionTypes.AUTH_FAIL,\n      signUpError: error,\n      signInError: null\n    };\n  } else {\n    return {\n      type: actionTypes.AUTH_FAIL,\n      signInError: error,\n      signUpError: null\n    };\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + API_KEY;\n\n    if (!isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + API_KEY;\n    }\n\n    ;\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.error, isSignup));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}; // import * as actionTypes from './actionTypes';\n// import axios from 'axios';\n// const API_KEY = 'AIzaSyCluRXdmpTGmLP9XBUBi9gaRgrhVZKTH-0'\n// export const authStart = () => {\n//     return {\n//         type: actionTypes.AUTH_START\n//     };\n// };\n// export const authSuccess = (token, userId) => {\n//     return {\n//         type: actionTypes.AUTH_SUCCESS,\n//         idToken: token,\n//         userId: userId\n//     };\n// };\n// export const authFail = (error) => {\n//     return {\n//         type: actionTypes.AUTH_FAIL,\n//         error: error\n//     };\n// };\n// export const logout = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('expirationDate');\n//     localStorage.removeItem('userId');\n//     return {\n//         type: actionTypes.AUTH_LOGOUT\n//     };\n// }\n// export const checkAuthTimeout = (expirationTime) => {\n//     return dispatch => {\n//         setTimeout(() => { dispatch(logout()) }, expirationTime * 1000);\n//     };\n// }\n// export const auth = (email, password, isSignup) => {\n//     return dispatch => {\n//         dispatch(authStart());\n//         const authData = {\n//             email: email,\n//             password: password,\n//             returnSecureToken: true\n//         }\n//         let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + API_KEY;\n//         if (!isSignup) {\n//             url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + API_KEY;\n//         };\n//         axios.post(url, authData)\n//             .then(response => {\n//                 const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\n//                 localStorage.setItem('token', response.data.idToken);\n//                 localStorage.setItem('expirationDate', expirationDate);\n//                 localStorage.setItem('userId', response.data.localId);\n//                 dispatch(authSuccess(response.data.idToken, response.data.localId));\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\n//             })\n//             .catch(error => {\n//                 dispatch(authFail(error.response.data.error));\n//             })\n//     };\n// };\n// export const setAuthRedirectPath = (path) => {\n//     return {\n//         type: actionTypes.SET_AUTH_REDIRECT_PATH,\n//         path: path\n//     }\n// }\n// export const authCheckState = () => {\n//     return dispatch => {\n//         const token = localStorage.getItem('token');\n//         if (!token) {\n//             dispatch(logout());\n//         } else {\n//             const expirationDate = new Date(localStorage.getItem('expirationDate'));\n//             if (expirationDate <= new Date()) {\n//                 dispatch(logout());\n//             } else {\n//                 const userId = localStorage.getItem('userId');\n//                 dispatch(authSuccess(token, userId));\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n//             }\n//         }\n//     }\n// }","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/store/actions/auth.js"],"names":["actionTypes","axios","API_KEY","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","isSignUp","isSignup","AUTH_FAIL","signUpError","signInError","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'AIzaSyCluRXdmpTGmLP9XBUBi9gaRgrhVZKTH-0'\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        idToken: token,\r\n        userId: userId\r\n    };\r\n};\r\n\r\nexport const authFail = (error, isSignUp) => {\r\n    if(isSignup){\r\n           return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        signUpError: error,\r\n        signInError: null,\r\n\r\n    };}\r\n    else{\r\n        return {\r\n            type: actionTypes.AUTH_FAIL,\r\n            signInError: error,\r\n            signUpError: null,\r\n\r\n        };\r\n    }\r\n\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationDate');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n}\r\n\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    return dispatch => {\r\n        setTimeout(() => { dispatch(logout()) }, expirationTime * 1000);\r\n    };\r\n}\r\n\r\nexport const auth = (email, password, isSignup) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        }\r\n\r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + API_KEY;\r\n\r\n        if (!isSignup) {\r\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + API_KEY;\r\n        };\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n                localStorage.setItem('token', response.data.idToken);\r\n                localStorage.setItem('expirationDate', expirationDate);\r\n                localStorage.setItem('userId', response.data.localId);\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n                dispatch(checkAuthTimeout(response.data.expiresIn));\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error.response.data.error, isSignup));\r\n            })\r\n    };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if (expirationDate <= new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                const userId = localStorage.getItem('userId');\r\n                dispatch(authSuccess(token, userId));\r\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\r\n            }\r\n        }\r\n    }\r\n}\r\n// import * as actionTypes from './actionTypes';\r\n// import axios from 'axios';\r\n\r\n// const API_KEY = 'AIzaSyCluRXdmpTGmLP9XBUBi9gaRgrhVZKTH-0'\r\n// export const authStart = () => {\r\n//     return {\r\n//         type: actionTypes.AUTH_START\r\n//     };\r\n// };\r\n\r\n// export const authSuccess = (token, userId) => {\r\n//     return {\r\n//         type: actionTypes.AUTH_SUCCESS,\r\n//         idToken: token,\r\n//         userId: userId\r\n//     };\r\n// };\r\n\r\n// export const authFail = (error) => {\r\n//     return {\r\n//         type: actionTypes.AUTH_FAIL,\r\n//         error: error\r\n//     };\r\n// };\r\n\r\n// export const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     localStorage.removeItem('expirationDate');\r\n//     localStorage.removeItem('userId');\r\n//     return {\r\n//         type: actionTypes.AUTH_LOGOUT\r\n//     };\r\n// }\r\n\r\n\r\n// export const checkAuthTimeout = (expirationTime) => {\r\n//     return dispatch => {\r\n//         setTimeout(() => { dispatch(logout()) }, expirationTime * 1000);\r\n//     };\r\n// }\r\n\r\n// export const auth = (email, password, isSignup) => {\r\n//     return dispatch => {\r\n//         dispatch(authStart());\r\n//         const authData = {\r\n//             email: email,\r\n//             password: password,\r\n//             returnSecureToken: true\r\n//         }\r\n\r\n\r\n//         let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + API_KEY;\r\n\r\n//         if (!isSignup) {\r\n//             url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + API_KEY;\r\n//         };\r\n//         axios.post(url, authData)\r\n//             .then(response => {\r\n//                 const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n//                 localStorage.setItem('token', response.data.idToken);\r\n//                 localStorage.setItem('expirationDate', expirationDate);\r\n//                 localStorage.setItem('userId', response.data.localId);\r\n//                 dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch(authFail(error.response.data.error));\r\n//             })\r\n//     };\r\n// };\r\n\r\n// export const setAuthRedirectPath = (path) => {\r\n//     return {\r\n//         type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n//         path: path\r\n//     }\r\n// }\r\n\r\n// export const authCheckState = () => {\r\n//     return dispatch => {\r\n//         const token = localStorage.getItem('token');\r\n//         if (!token) {\r\n//             dispatch(logout());\r\n//         } else {\r\n//             const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n//             if (expirationDate <= new Date()) {\r\n//                 dispatch(logout());\r\n//             } else {\r\n//                 const userId = localStorage.getItem('userId');\r\n//                 dispatch(authSuccess(token, userId));\r\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\r\n//             }\r\n//         }\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}