{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false,\n  building: false\n};\nconst INGREDIENT_PRICE = {\n  quinoa: 2,\n  whiterice: 0,\n  brownrice: 1,\n  prawn: 3,\n  egg: 2,\n  lettuce: 1\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return { //overwrite the copy of ingredients\n        ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICE[action.ingredientName],\n        building: true\n      };\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICE[action.ingredientName],\n        building: true\n      };\n\n    case actionTypes.RESET_INGREDIENTS:\n      let resetIngredients = { ...state.ingredients\n      };\n      let resetPrice = state.totalPrice;\n      action.ingredientNames.forEach(ing => {\n        if (resetIngredients[ing] !== 0) {\n          resetPrice = resetPrice - INGREDIENT_PRICE[ing];\n        }\n\n        resetIngredients[ing] = 0;\n      });\n      return { ...state,\n        ingredients: resetIngredients,\n        totalPrice: resetPrice,\n        building: true\n      };\n\n    case actionTypes.SET_INGREDIENTS:\n      return { ...state,\n        ingredients: action.ingredients,\n        totalPrice: 4,\n        error: false,\n        building: false\n      };\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      {\n        return { ...state,\n          error: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/store/reducers/pokeBuilder.js"],"names":["actionTypes","initialState","ingredients","totalPrice","error","building","INGREDIENT_PRICE","quinoa","whiterice","brownrice","prawn","egg","lettuce","reducer","state","action","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT","RESET_INGREDIENTS","resetIngredients","resetPrice","ingredientNames","forEach","ing","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,KAAK,EAAE,KAHU;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;AAOA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,SAAS,EAAC,CAFW;AAGrBC,EAAAA,SAAS,EAAC,CAHW;AAIrBC,EAAAA,KAAK,EAAE,CAJc;AAKrBC,EAAAA,GAAG,EAAE,CALgB;AAMrBC,EAAAA,OAAO,EAAE;AANY,CAAzB;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,WAAW,CAACiB,cAAjB;AACI,aAAO,EACH;AACA,WAAGH,KAFA;AAGHZ,QAAAA,WAAW,EAAE,EACT,GAAGY,KAAK,CAACZ,WADA;AAET,WAACa,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACZ,WAAN,CAAkBa,MAAM,CAACG,cAAzB,IAA2C;AAF3D,SAHV;AAOHf,QAAAA,UAAU,EAAEW,KAAK,CAACX,UAAN,GAAmBG,gBAAgB,CAACS,MAAM,CAACG,cAAR,CAP5C;AAQHb,QAAAA,QAAQ,EAAE;AARP,OAAP;;AAUJ,SAAKL,WAAW,CAACmB,iBAAjB;AACI,aAAO,EACH,GAAGL,KADA;AAEHZ,QAAAA,WAAW,EAAE,EACT,GAAGY,KAAK,CAACZ,WADA;AAET,WAACa,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACZ,WAAN,CAAkBa,MAAM,CAACG,cAAzB,IAA2C;AAF3D,SAFV;AAMHf,QAAAA,UAAU,EAAEW,KAAK,CAACX,UAAN,GAAmBG,gBAAgB,CAACS,MAAM,CAACG,cAAR,CAN5C;AAOHb,QAAAA,QAAQ,EAAE;AAPP,OAAP;;AASJ,SAAKL,WAAW,CAACoB,iBAAjB;AACI,UAAIC,gBAAgB,GAAG,EAAE,GAAGP,KAAK,CAACZ;AAAX,OAAvB;AACA,UAAIoB,UAAU,GAAGR,KAAK,CAACX,UAAvB;AACAY,MAAAA,MAAM,CAACQ,eAAP,CAAuBC,OAAvB,CAA+BC,GAAG,IAAI;AAClC,YAAGJ,gBAAgB,CAACI,GAAD,CAAhB,KAAwB,CAA3B,EAA6B;AACTH,UAAAA,UAAU,GAACA,UAAU,GAAChB,gBAAgB,CAACmB,GAAD,CAAtC;AAEnB;;AACDJ,QAAAA,gBAAgB,CAACI,GAAD,CAAhB,GAAwB,CAAxB;AAEH,OAPD;AAQA,aAAO,EACH,GAAGX,KADA;AAEHZ,QAAAA,WAAW,EAAEmB,gBAFV;AAGHlB,QAAAA,UAAU,EAAEmB,UAHT;AAIHjB,QAAAA,QAAQ,EAAE;AAJP,OAAP;;AAOJ,SAAKL,WAAW,CAAC0B,eAAjB;AACI,aAAO,EACH,GAAGZ,KADA;AAEHZ,QAAAA,WAAW,EAAEa,MAAM,CAACb,WAFjB;AAGHC,QAAAA,UAAU,EAAE,CAHT;AAIHC,QAAAA,KAAK,EAAE,KAJJ;AAKHC,QAAAA,QAAQ,EAAE;AALP,OAAP;;AAOJ,SAAKL,WAAW,CAAC2B,wBAAjB;AACI;AACI,eAAO,EACH,GAAGb,KADA;AAEHV,UAAAA,KAAK,EAAE;AAFJ,SAAP;AAIH;;AACL;AAAS,aAAOU,KAAP;AAvDb;AAyDH,CA1DD;;AA4DA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    ingredients: null,\r\n    totalPrice: 4,\r\n    error: false,\r\n    building: false\r\n};\r\n\r\nconst INGREDIENT_PRICE = {\r\n    quinoa: 2,\r\n    whiterice:0,\r\n    brownrice:1,\r\n    prawn: 3,\r\n    egg: 2,\r\n    lettuce: 1,\r\n\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_INGREDIENT:\r\n            return {\r\n                //overwrite the copy of ingredients\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\r\n                },\r\n                totalPrice: state.totalPrice + INGREDIENT_PRICE[action.ingredientName],\r\n                building: true\r\n            };\r\n        case actionTypes.REMOVE_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\r\n                },\r\n                totalPrice: state.totalPrice - INGREDIENT_PRICE[action.ingredientName],\r\n                building: true\r\n            };\r\n        case actionTypes.RESET_INGREDIENTS:\r\n            let resetIngredients = { ...state.ingredients };\r\n            let resetPrice = state.totalPrice;\r\n            action.ingredientNames.forEach(ing => {\r\n                if(resetIngredients[ing]!==0){\r\n                                    resetPrice=resetPrice-INGREDIENT_PRICE[ing];\r\n\r\n                }                \r\n                resetIngredients[ing] = 0;\r\n\r\n            });\r\n            return {\r\n                ...state,\r\n                ingredients: resetIngredients,\r\n                totalPrice: resetPrice,\r\n                building: true\r\n            };\r\n\r\n        case actionTypes.SET_INGREDIENTS:\r\n            return {\r\n                ...state,\r\n                ingredients: action.ingredients,\r\n                totalPrice: 4,\r\n                error: false,\r\n                building: false\r\n            };\r\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: true\r\n                }\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}