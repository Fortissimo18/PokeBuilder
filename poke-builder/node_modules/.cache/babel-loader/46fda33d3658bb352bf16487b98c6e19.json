{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/utility';\nimport Alert from 'react-bootstrap/Alert';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport bgImg from '../../assets/images/pokeIngredients/cinnamon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        signUp: {\n          email: {\n            elementType: 'input',\n            elementConfig: {\n              type: 'email',\n              placeholder: 'Email'\n            },\n            value: '',\n            validation: {\n              required: true,\n              isEmail: true\n            },\n            validity: false,\n            touched: false\n          },\n          password: {\n            elementType: 'input',\n            elementConfig: {\n              type: 'password',\n              placeholder: 'Password'\n            },\n            value: '',\n            validation: {\n              required: true,\n              minLength: 6\n            },\n            validity: false,\n            touched: false\n          },\n          name: {\n            elementType: 'input',\n            elementConfig: {\n              type: 'name',\n              placeholder: 'Name'\n            },\n            value: '',\n            validation: {\n              required: true,\n              maxLength: 25\n            },\n            validity: false,\n            touched: false\n          }\n        },\n        signIn: {\n          email: {\n            elementType: 'input',\n            elementConfig: {\n              type: 'email',\n              placeholder: 'Email'\n            },\n            value: '',\n            validation: {\n              required: true,\n              isEmail: true\n            },\n            validity: false,\n            touched: false\n          },\n          password: {\n            elementType: 'input',\n            elementConfig: {\n              type: 'password',\n              placeholder: 'Password'\n            },\n            value: '',\n            validation: {\n              required: true,\n              minLength: 6\n            },\n            validity: false,\n            touched: false\n          }\n        }\n      },\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlType, controlName) => {\n      const updatedControls = { ...this.state.controls[controlType],\n        [controlName]: { ...this.state.controls[controlType][controlName],\n          value: event.target.value,\n          validity: checkValidity(event.target.value, this.state.controls[controlType][controlName].validation),\n          touched: true\n        }\n      };\n      this.setState(({\n        controls\n      }) => ({\n        controls: { ...controls,\n          [controlType]: updatedControls\n        }\n      }));\n    };\n\n    this.submitHandler = (event, type) => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls[type].email.value, this.state.controls[type].password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    this.signUpErrorMessage = () => {\n      //rearrang the error message from firebase\n      let errorMessage = null;\n\n      if (this.props.signUpError) {\n        const lower = String(this.props.signUpError.message).toLowerCase().replace('_', ' ');\n        const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n        errorMessage = /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: msgText\n        }, msgText, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this);\n      }\n\n      return errorMessage;\n    };\n\n    this.signInErrorMessage = () => {\n      //rearrang the error message from firebase\n      let errorMessage = null;\n\n      if (this.props.signInError) {\n        const lower = String(this.props.signInError.message).toLowerCase().replace('_', ' ');\n        const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n        errorMessage = /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: msgText\n        }, msgText, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this);\n      }\n\n      return errorMessage;\n    };\n\n    this.arrangeForm = type => {\n      const formElementsArray = [];\n\n      for (let key in this.state.controls[type]) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[type][key]\n        });\n      }\n\n      let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        valid: formElement.config.validity,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, type, formElement.id),\n        backgroundImg: bgImg\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this));\n      return form;\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingPoke && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    let signUpForm = this.arrangeForm('signUp');\n    let signInForm = this.arrangeForm('signIn');\n\n    if (this.props.loading) {\n      signInForm = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 26\n      }, this);\n      signUpForm = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 26\n      }, this);\n    }\n\n    const signUpErrorMessage = this.signUpErrorMessage();\n    const signInErrorMessage = this.signInErrorMessage();\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 28\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loginBG,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.section,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.checkbox,\n          type: \"checkbox\",\n          id: \"reg-log\",\n          name: \"reg-log\",\n          onClick: this.switchAuthModeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"reg-log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.card3dWrap,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.card3dWrapper,\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: event => {\n                this.submitHandler(event, 'signUp');\n              },\n              className: classes.cardFront,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.centerWrap,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Sign Up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 37\n                }, this), signUpForm, signUpErrorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: [classes.box, classes.shadow].join(' '),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.circle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 41\n                  }, this), \"Submit\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: event => {\n                this.submitHandler(event, 'signIn');\n              },\n              className: classes.cardBack,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.centerWrap,\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Log In\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 41\n                  }, this), signInForm, signInErrorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: [classes.box, classes.shadow].join(' '),\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.circle\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 222,\n                      columnNumber: 41\n                    }, this), \"Submit\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"mb-0 mt-4 text-center\",\n                    children: /*#__PURE__*/_jsxDEV(\"a\", {\n                      href: \"#0\",\n                      className: classes.link,\n                      children: \"Forgot your password?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 224,\n                      columnNumber: 118\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 224,\n                    columnNumber: 81\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    signInError: state.auth.signInError,\n    signUpError: state.auth.signUpError,\n    isAuthenticated: state.auth.token !== null,\n    buildingPoke: state.pokeBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth); // import React, { Component } from 'react';\n// import Input from '../../components/UI/Input/Input';\n// import Button from '../../components/UI/Button/Button';\n// import classes from './Auth.module.css';\n// import * as actions from '../../store/actions/index';\n// import { connect } from 'react-redux';\n// import Spinner from '../../components/UI/Spinner/Spinner';\n// import {Redirect} from 'react-router-dom';\n// import {checkValidity} from '../../shared/utility';\n// import Alert from 'react-bootstrap/Alert';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// class Auth extends Component {\n//     state = {\n//         controls: {\n//             email: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'email',\n//                     placeholder: 'Email'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     isEmail: true\n//                 },\n//                 validity: false,\n//                 touched: false\n//             },\n//             password: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'password',\n//                     placeholder: 'Password'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     minLength: 6\n//                 },\n//                 validity: false,\n//                 touched: false\n//             },\n//         },\n//         isSignUp: true\n//     }\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\n//                 touched: true\n//             }\n//         };\n//         this.setState({ controls: updatedControls });\n//     }\n//     submitHandler = (event) => {\n//         event.preventDefault();        \n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n//     }\n//     switchAuthModeHandler =()=>{\n//         this.setState(prevState => {\n//             return{\n//                 isSignUp:!prevState.isSignUp\n//             }\n//         });\n//     }\n//     errorMessage = () => { //rearrang the error message from firebase\n//         let errorMessage  = null;\n//         if(this.props.error){\n//             const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\n//             const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n//             errorMessage=(\n//                 <Alert key = {msgText} variant = \"danger\">{msgText}</Alert>\n//             );\n//         }\n//         return errorMessage\n//     }\n//     componentDidMount(){\n//         if (! this.props.buildingPoke && this.props.authRedirectPath !=='/'){\n//             this.props.onSetAuthRedirectPath();\n//         }\n//     }\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key]\n//             });\n//         }\n//         let form = formElementsArray.map(formElement => (\n//             <Input\n//                 key={formElement.id}\n//                 elementType={formElement.config.elementType}\n//                 elementConfig={formElement.config.elementConfig}\n//                 value={formElement.config.value}\n//                 valid={formElement.config.validity}\n//                 touched={formElement.config.touched}\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n//         ));\n//         if(this.props.loading){\n//             form=<Spinner/>\n//         }\n//         let authRedirect = null;\n//         if(this.props.isAuthenticated){\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\n//         } \n//         const errorMessage  = this.errorMessage();\n//         return (\n//             <div>\n//                 <div className={classes.Auth}>\n//                 {authRedirect}\n//                 <h1>{this.state.isSignUp? \"Sign Up\" : \"Sign In\"}</h1>\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     {errorMessage}\n//                     <Button btnType=\"Success\">Submit</Button>\n//                 </form>                \n//                 <Button \n//                 clicked = {this.switchAuthModeHandler}\n//                 btnType = \"Danger\">Switch to {this.state.isSignUp? \"Sign In\" : \"Sign Up\"}</Button>\n//             </div>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = state =>{\n//     return {\n//         loading: state.auth.loading,\n//         error: state.auth.error,\n//         isAuthenticated: state.auth.token !== null,\n//         buildingPoke: state.pokeBuilder.building,\n//         authRedirectPath: state.auth.authRedirectPath\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password,isSignUp)),\n//         onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\n//     }\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","checkValidity","Alert","bgImg","Auth","state","controls","signUp","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","validity","touched","password","minLength","name","maxLength","signIn","isSignUp","inputChangedHandler","event","controlType","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","signUpErrorMessage","errorMessage","signUpError","lower","String","message","toLowerCase","replace","msgText","charAt","toUpperCase","slice","signInErrorMessage","signInError","arrangeForm","formElementsArray","key","push","id","config","form","map","formElement","componentDidMount","buildingPoke","authRedirectPath","onSetAuthRedirectPath","render","signUpForm","signInForm","loading","authRedirect","isAuthenticated","loginBG","section","heading","checkbox","card3dWrap","card3dWrapper","cardFront","centerWrap","box","shadow","join","circle","cardBack","link","mapStateToProps","auth","token","pokeBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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":["import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { checkValidity } from '../../shared/utility';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport bgImg from '../../assets/images/pokeIngredients/cinnamon.png'\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            signUp: {\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Email'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        isEmail: true\r\n                    },\r\n                    validity: false,\r\n                    touched: false\r\n                },\r\n                password: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'password',\r\n                        placeholder: 'Password'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 6\r\n                    },\r\n                    validity: false,\r\n                    touched: false\r\n                },\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'name',\r\n                        placeholder: 'Name'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        maxLength: 25\r\n                    },\r\n                    validity: false,\r\n                    touched: false\r\n                },\r\n            },\r\n            signIn: {\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Email'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        isEmail: true\r\n                    },\r\n                    validity: false,\r\n                    touched: false\r\n                },\r\n                password: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'password',\r\n                        placeholder: 'Password'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 6\r\n                    },\r\n                    validity: false,\r\n                    touched: false\r\n                },\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    inputChangedHandler = (event, controlType, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls[controlType],\r\n            [controlName]: {\r\n                ...this.state.controls[controlType][controlName],\r\n                value: event.target.value,\r\n                validity: checkValidity(event.target.value, this.state.controls[controlType][controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState(({ controls }) => ({ controls: { ...controls, [controlType]: updatedControls } }));\r\n    }\r\n\r\n    submitHandler = (event, type) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls[type].email.value, this.state.controls[type].password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        });\r\n    }\r\n\r\n    signUpErrorMessage = () => { //rearrang the error message from firebase\r\n        let errorMessage = null;\r\n        if (this.props.signUpError) {\r\n            const lower = String(this.props.signUpError.message).toLowerCase().replace('_', ' ');\r\n            const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            errorMessage = (\r\n                <Alert key={msgText} variant=\"danger\">{msgText}</Alert>\r\n            );\r\n        } return errorMessage;\r\n    }\r\n    signInErrorMessage = () => { //rearrang the error message from firebase\r\n        let errorMessage = null;\r\n\r\n        if (this.props.signInError) {\r\n            const lower = String(this.props.signInError.message).toLowerCase().replace('_', ' ');\r\n            const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            errorMessage = (\r\n                <Alert key={msgText} variant=\"danger\">{msgText}</Alert>\r\n            );\r\n        }\r\n        return errorMessage;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingPoke && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    arrangeForm = (type) => {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls[type]) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[type][key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                valid={formElement.config.validity}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, type, formElement.id)}\r\n                backgroundImg={bgImg} />\r\n        ));\r\n        return form;\r\n    }\r\n\r\n    render() {\r\n\r\n        let signUpForm = this.arrangeForm('signUp');\r\n        let signInForm = this.arrangeForm('signIn');\r\n\r\n        if (this.props.loading) {\r\n            signInForm = <Spinner />\r\n            signUpForm = <Spinner />\r\n        }\r\n        const signUpErrorMessage = this.signUpErrorMessage();\r\n        const signInErrorMessage = this.signInErrorMessage();\r\n\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.loginBG}>\r\n                <div className={classes.section}>\r\n                    <h1 className={classes.heading}>\r\n                        <span>Log In</span>\r\n                        <span>Sign Up</span>\r\n                    </h1>\r\n                    <input className={classes.checkbox} type=\"checkbox\" id=\"reg-log\" name=\"reg-log\" onClick={this.switchAuthModeHandler} />\r\n                    <label for=\"reg-log\"></label>\r\n                    <div className={classes.card3dWrap}>\r\n                        <div className={classes.card3dWrapper}>\r\n\r\n                            <form onSubmit={event => { this.submitHandler(event, 'signUp') }} className={classes.cardFront}>\r\n                                <div className={classes.centerWrap}>\r\n                                    <h2 >Sign Up</h2>\r\n                                    {signUpForm}\r\n                                    {signUpErrorMessage}\r\n                                    <button className={[classes.box, classes.shadow].join(' ')}>\r\n                                        <div className={classes.circle}></div>\r\n                                        Submit</button>\r\n                                </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={event => { this.submitHandler(event, 'signIn') }} className={classes.cardBack}>\r\n                                <div >\r\n                                    <div className={classes.centerWrap}>\r\n                                        <h2 >Log In</h2>\r\n                                        {signInForm}\r\n                                        {signInErrorMessage}\r\n                                        <button className={[classes.box, classes.shadow].join(' ')}>\r\n                                        <div className={classes.circle}></div>\r\n                                        Submit</button>\r\n                                                                                <p className=\"mb-0 mt-4 text-center\"><a href=\"#0\" className={classes.link}>Forgot your password?</a></p>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        signInError: state.auth.signInError,\r\n        signUpError: state.auth.signUpError,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingPoke: state.pokeBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import Input from '../../components/UI/Input/Input';\r\n// import Button from '../../components/UI/Button/Button';\r\n// import classes from './Auth.module.css';\r\n// import * as actions from '../../store/actions/index';\r\n// import { connect } from 'react-redux';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\n// import {Redirect} from 'react-router-dom';\r\n// import {checkValidity} from '../../shared/utility';\r\n// import Alert from 'react-bootstrap/Alert';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// class Auth extends Component {\r\n\r\n//     state = {\r\n//         controls: {\r\n//             email: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'email',\r\n//                     placeholder: 'Email'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     isEmail: true\r\n//                 },\r\n//                 validity: false,\r\n//                 touched: false\r\n//             },\r\n//             password: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'password',\r\n//                     placeholder: 'Password'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     minLength: 6\r\n//                 },\r\n//                 validity: false,\r\n//                 touched: false\r\n//             },\r\n//         },\r\n//         isSignUp: true\r\n//     }\r\n\r\n//     inputChangedHandler = (event, controlName) => {\r\n//         const updatedControls = {\r\n//             ...this.state.controls,\r\n//             [controlName]: {\r\n//                 ...this.state.controls[controlName],\r\n//                 value: event.target.value,\r\n//                 validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n//                 touched: true\r\n//             }\r\n//         };\r\n//         this.setState({ controls: updatedControls });\r\n//     }\r\n\r\n//     submitHandler = (event) => {\r\n//         event.preventDefault();        \r\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n//     }\r\n\r\n//     switchAuthModeHandler =()=>{\r\n//         this.setState(prevState => {\r\n//             return{\r\n//                 isSignUp:!prevState.isSignUp\r\n//             }\r\n//         });\r\n//     }\r\n\r\n//     errorMessage = () => { //rearrang the error message from firebase\r\n//         let errorMessage  = null;\r\n\r\n//         if(this.props.error){\r\n//             const lower = String(this.props.error.message).toLowerCase().replace('_', ' ');\r\n//             const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n//             errorMessage=(\r\n//                 <Alert key = {msgText} variant = \"danger\">{msgText}</Alert>\r\n//             );\r\n//         }\r\n//         return errorMessage\r\n//     }\r\n\r\n\r\n//     componentDidMount(){\r\n//         if (! this.props.buildingPoke && this.props.authRedirectPath !=='/'){\r\n//             this.props.onSetAuthRedirectPath();\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         const formElementsArray = [];\r\n//         for (let key in this.state.controls) {\r\n//             formElementsArray.push({\r\n//                 id: key,\r\n//                 config: this.state.controls[key]\r\n//             });\r\n//         }\r\n\r\n//         let form = formElementsArray.map(formElement => (\r\n//             <Input\r\n//                 key={formElement.id}\r\n//                 elementType={formElement.config.elementType}\r\n//                 elementConfig={formElement.config.elementConfig}\r\n//                 value={formElement.config.value}\r\n//                 valid={formElement.config.validity}\r\n//                 touched={formElement.config.touched}\r\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n//         ));\r\n\r\n//         if(this.props.loading){\r\n//             form=<Spinner/>\r\n//         }\r\n\r\n\r\n//         let authRedirect = null;\r\n//         if(this.props.isAuthenticated){\r\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n//         } \r\n\r\n//         const errorMessage  = this.errorMessage();\r\n\r\n//         return (\r\n//             <div>\r\n//                 <div className={classes.Auth}>\r\n//                 {authRedirect}\r\n//                 <h1>{this.state.isSignUp? \"Sign Up\" : \"Sign In\"}</h1>\r\n//                 <form onSubmit={this.submitHandler}>\r\n//                     {form}\r\n//                     {errorMessage}\r\n//                     <Button btnType=\"Success\">Submit</Button>\r\n//                 </form>                \r\n//                 <Button \r\n//                 clicked = {this.switchAuthModeHandler}\r\n//                 btnType = \"Danger\">Switch to {this.state.isSignUp? \"Sign In\" : \"Sign Up\"}</Button>\r\n//             </div>\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = state =>{\r\n//     return {\r\n//         loading: state.auth.loading,\r\n//         error: state.auth.error,\r\n//         isAuthenticated: state.auth.token !== null,\r\n//         buildingPoke: state.pokeBuilder.building,\r\n//         authRedirectPath: state.auth.authRedirectPath\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password,isSignUp)),\r\n//         onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\r\n//     }\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}