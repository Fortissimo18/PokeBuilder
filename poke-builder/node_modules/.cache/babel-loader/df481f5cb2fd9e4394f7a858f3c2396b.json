{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchasePokeSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_POKE_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchasePokeFail = error => {\n  return {\n    type: actionTypes.PURCHASE_POKE_FAIL,\n    error: error\n  };\n};\nexport const purchasePokeStart = () => {\n  return {\n    type: actionTypes.PURCHASE_POKE_START\n  };\n};\nexport const purchasePoke = orderData => {\n  return dispatch => {\n    dispatch(purchasePokeStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchasePokeSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchasePokeFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(response => {\n      const fetchedOrders = [];\n\n      for (let key in response.data) {\n        fetchedOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(error => {\n      dispatch(fetchOrdersFail(error));\n    });\n  };\n};","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/store/actions/order.js"],"names":["actionTypes","axios","purchasePokeSuccess","id","orderData","type","PURCHASE_POKE_SUCCESS","orderId","purchasePokeFail","error","PURCHASE_POKE_FAIL","purchasePokeStart","PURCHASE_POKE_START","purchasePoke","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersStart","FETCH_ORDERS_START","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrders","get","fetchedOrders","key","push"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AAClD,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,qBADf;AAEHC,IAAAA,OAAO,EAAEJ,EAFN;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CANM;AAQP,OAAO,MAAMI,gBAAgB,GAAIC,KAAD,IAAW;AACvC,SAAO;AACHJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,kBADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,iBAAiB,GAAG,MAAM;AACnC,SAAO;AACHN,IAAAA,IAAI,EAAEL,WAAW,CAACY;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAIT,SAAD,IAAe;AACvC,SAAOU,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACH,iBAAiB,EAAlB,CAAR;AACAV,IAAAA,KAAK,CAACc,IAAN,CAAW,cAAX,EAA2BX,SAA3B,EACKY,IADL,CACUC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACZ,mBAAmB,CAACe,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBf,SAArB,CAApB,CAAR;AACH,KAHL,EAIKgB,KAJL,CAIWX,KAAK,IAAI;AACZK,MAAAA,QAAQ,CAACN,gBAAgB,CAACC,KAAD,CAAjB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHhB,IAAAA,IAAI,EAAEL,WAAW,CAACsB;AADf,GAAP;AAGH,CAJM;AAOP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADf,GAAP;AAGH,CAJM;AAKP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHrB,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,oBADf;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAInB,KAAD,IAAW;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,iBADf;AAEHpB,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMqB,WAAW,GAAG,MAAM;AAC7B,SAAOhB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACS,gBAAgB,EAAjB,CAAR;AACAtB,IAAAA,KAAK,CAAC8B,GAAN,CAAU,cAAV,EACKf,IADL,CACUC,QAAQ,IAAI;AACd,YAAMe,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBhB,QAAQ,CAACC,IAAzB,EAA+B;AAC3Bc,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACf,GAAGjB,QAAQ,CAACC,IAAT,CAAce,GAAd,CADY;AAEf9B,UAAAA,EAAE,EAAE8B;AAFW,SAAnB;AAIH;;AACDnB,MAAAA,QAAQ,CAACW,kBAAkB,CAACO,aAAD,CAAnB,CAAR;AACH,KAVL,EAWKZ,KAXL,CAWWX,KAAK,IAAI;AACZK,MAAAA,QAAQ,CAACc,eAAe,CAACnB,KAAD,CAAhB,CAAR;AACH,KAbL;AAcH,GAhBD;AAiBH,CAlBM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nexport const purchasePokeSuccess = (id, orderData) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_POKE_SUCCESS,\r\n        orderId: id,\r\n        orderData: orderData\r\n    };\r\n};\r\n\r\nexport const purchasePokeFail = (error) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_POKE_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const purchasePokeStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_POKE_START\r\n    };\r\n};\r\n\r\nexport const purchasePoke = (orderData) => {\r\n    return dispatch => {\r\n        dispatch(purchasePokeStart());\r\n        axios.post('/orders.json', orderData)\r\n            .then(response => {\r\n                dispatch(purchasePokeSuccess(response.data.name, orderData));\r\n            })\r\n            .catch(error => {\r\n                dispatch(purchasePokeFail(error));\r\n            });\r\n    }\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    };\r\n};\r\n\r\n\r\nexport const fetchOrdersStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_START,\r\n    };\r\n};\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    };\r\n};\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const fetchOrders = () => {\r\n    return dispatch => {\r\n        dispatch(fetchOrdersStart());\r\n        axios.get('/orders.json')\r\n            .then(response => {\r\n                const fetchedOrders = [];\r\n                for (let key in response.data) {\r\n                    fetchedOrders.push({\r\n                        ...response.data[key],\r\n                        id: key\r\n                    });\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchedOrders))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchOrdersFail(error));\r\n            });\r\n    };\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}