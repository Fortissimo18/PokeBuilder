{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITCoursesProjects\\\\React\\\\PokeBuilder\\\\poke-builder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          validity: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          validity: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    this.errorMessage = () => {\n      let errorMessage = null;\n\n      if (this.props.error) {\n        const lower = this.props.error.toLowerCase();\n        const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\n        errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msgText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this);\n      }\n\n      return errorMessage;\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingPoke && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      valid: formElement.config.validity,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 18\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 28\n      }, this);\n    }\n\n    const errorMessage = this.errorMessage();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.isSignUp ? \"Sign Up\" : \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        children: [\"Switch to \", this.state.isSignUp ? \"Sign In\" : \"Sign Up\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingPoke: state.pokeBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/ITCoursesProjects/React/PokeBuilder/poke-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","validity","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","errorMessage","error","lower","toLowerCase","msgText","charAt","toUpperCase","slice","componentDidMount","buildingPoke","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","authRedirect","isAuthenticated","mapStateToProps","auth","token","pokeBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {checkValidity} from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                validity: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();        \r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler =()=>{\r\n        this.setState(prevState => {\r\n            return{\r\n                isSignUp:!prevState.isSignUp\r\n            }\r\n        });\r\n    }\r\n\r\n    errorMessage = () => {\r\n        let errorMessage  = null;\r\n\r\n        if(this.props.error){\r\n            const lower = this.props.error.toLowerCase()\r\n            const msgText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            errorMessage=(\r\n                <p>{msgText}</p>\r\n            );\r\n        }\r\n        return errorMessage\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        if (! this.props.buildingPoke && this.props.authRedirectPath !=='/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                valid={formElement.config.validity}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n        ));\r\n\r\n        if(this.props.loading){\r\n            form=<Spinner/>\r\n        }\r\n\r\n       \r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        } \r\n        \r\n        const errorMessage  = this.errorMessage();\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <h1>{this.state.isSignUp? \"Sign Up\" : \"Sign In\"}</h1>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n                </form>\r\n                <Button \r\n                clicked = {this.switchAuthModeHandler}\r\n                btnType = \"Danger\">Switch to {this.state.isSignUp? \"Sign In\" : \"Sign Up\"}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingPoke: state.pokeBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\n \r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password,isSignUp)),\r\n        onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}